add      $at, $zero, $v1
addu     $at, $v0, $a0
sub      $a0, $a1, $zero
subu     $s3, $s2, $a2
and      $a3, $t0, $t1
or       $t2, $t3, $t4
nor      $t5, $t6, $t7
slt      $s0, $s1, $s2
sltu     $s3, $s4, $s5
sll      $s6, $s7, 10
srl      $t8, $t9, 7
jr       $ra
addi     $sp, $sp, 4
addiu    $k1, $k0, 28
slti     $s5, $t4, 90
sltiu    $s2, $s0, 53
andi     $t3, $t0, 109
ori      $s1, $v0, 743
lui      $at, 100
lw       $t5, 12($fp)
sw       $s0, 0($gp)
main:    add $a1, $zero, $zero     # $a1=begin
         add $a2, $zero, $zero     # $a2=end
         add $s2, $zero, $zero     # int k
         addi $s3, $zero, 1        # powOfTwo=1
         add $s4, $zero, $zero     # decimal=0
         jal binToDec              # call binToDec
binToDec:add $s2, $s2, $a2         # k=end
         slt $t0, $s2, $a1         # check k<begin
         bne $t0, $zero, end       # if $t0!=0, go to end
loop:    sll $t0, $s2, 2           # $t0=k*4
         add $t0, $t0, $s1         # $t0 is address of A[k]
         lw $t1, 0($t0)            # $t1=A[k]
         beq $t1, $zero, exit      # if $t1==0, go to exit
exit:    sll $s3, $s3, 1           # powOfTwo*-2
         addi $s2, $s2, 1          # k+=1
         j loop                    # go to loop
end:     add $v0, $zero, $s4       # add decimal to $v0
         jr $ra                    # return value stored in $v0

MAIN:
and $a3, MAIN: $t0, $t1
and $a3, $t0, $t1 MAIN:
# check k<begin slt $t0, $s2, $a1 
slt $t0, # check k<begin $s2, $a1 
add 
$a0, $s6, $a3   
adde $a1, $zero, $zero    # $a1=begin  
lwe  $t5, 12($fp)  
jo loop 
or $t2, $t3, $v9
loop: add $a2, 10, $zero
sll $s6, $s7, $t0
jr $at
beq $a0, $a1, $a3
addi $t5, $t7, $s0
lui $at, $s1
lw  $t5, $s3(19)
sw  $s0, $t2($gp)
jal 100
bne $s7
subu $s3, $s2, $a2, 10
bne $t0, $zero, END